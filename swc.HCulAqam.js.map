{"version":3,"file":"swc.CwG43AIM.js","sources":["../../../node_modules/@ctrl/tinycolor/dist/module/util.js","../../../node_modules/@ctrl/tinycolor/dist/module/conversion.js","../../../node_modules/@ctrl/tinycolor/dist/module/css-color-names.js","../../../node_modules/@ctrl/tinycolor/dist/module/format-input.js","../../../node_modules/@ctrl/tinycolor/dist/module/index.js","../../../packages/color-field/src/ColorField.js","../../../packages/color-field/sp-color-field.js"],"sourcesContent":["/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nexport function bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = '100%';\n    }\n    const isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nexport function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nexport function isOnePointZero(n) {\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nexport function isPercentage(n) {\n    return typeof n === 'string' && n.indexOf('%') !== -1;\n}\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nexport function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nexport function convertToPercentage(n) {\n    if (Number(n) <= 1) {\n        return `${Number(n) * 100}%`;\n    }\n    return n;\n}\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nexport function pad2(c) {\n    return c.length === 1 ? '0' + c : String(c);\n}\n","import { bound01, pad2 } from './util.js';\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h, s, l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h, s, l) {\n    let r;\n    let g;\n    let b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    const v = max;\n    const d = max - min;\n    const s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h, s, v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    const i = Math.floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    const mod = i % 6;\n    const r = [v, q, p, p, t, v][mod];\n    const g = [t, v, v, q, p, p][mod];\n    const b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255]\n * *Returns:* a 3 or 6 character hex\n */\nexport function rgbToHex(r, g, b, allow3Char) {\n    const hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * *Assumes:* r, g, b are contained in the set [0, 255] and a in [0, 1]\n * *Returns:* a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r, g, b, a, allow4Char) {\n    const hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n        pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n *\n * *Assumes:* r, g, b are contained in the set [0, 255] and a in [0, 1]\n * *Returns:* a 8 character argb hex\n */\nexport function rgbaToArgbHex(r, g, b, a) {\n    const hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join('');\n}\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexport function numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n","// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport const names = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    goldenrod: '#daa520',\n    gold: '#ffd700',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavenderblush: '#fff0f5',\n    lavender: '#e6e6fa',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n","import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb, } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { boundAlpha, convertToPercentage } from './util.js';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    let rgb = { r: 0, g: 0, b: 0 };\n    let a = 1;\n    let s = null;\n    let v = null;\n    let l = null;\n    let ok = false;\n    let format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nconst CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nconst CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nconst CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\n// eslint-disable-next-line prettier/prettier\nconst PERMISSIVE_MATCH3 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\nconst PERMISSIVE_MATCH4 = \n// eslint-disable-next-line prettier/prettier\n'[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\nconst matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    let named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    let match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n","import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { inputToRGB } from './format-input.js';\nimport { bound01, boundAlpha, clamp01 } from './util.js';\nexport class TinyColor {\n    constructor(color = '', opts = {}) {\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        const rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = opts.format ?? rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    isDark() {\n        return this.getBrightness() < 128;\n    }\n    isLight() {\n        return !this.isDark();\n    }\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    getBrightness() {\n        // http://www.w3.org/TR/AERT#color-contrast\n        const rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    }\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    getLuminance() {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        const rgb = this.toRgb();\n        let R;\n        let G;\n        let B;\n        const RsRGB = rgb.r / 255;\n        const GsRGB = rgb.g / 255;\n        const BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    }\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    getAlpha() {\n        return this.a;\n    }\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    setAlpha(alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    }\n    /**\n     * Returns whether the color is monochrome.\n     */\n    isMonochrome() {\n        const { s } = this.toHsl();\n        return s === 0;\n    }\n    /**\n     * Returns the object as a HSVA object.\n     */\n    toHsv() {\n        const hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    }\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    toHsvString() {\n        const hsv = rgbToHsv(this.r, this.g, this.b);\n        const h = Math.round(hsv.h * 360);\n        const s = Math.round(hsv.s * 100);\n        const v = Math.round(hsv.v * 100);\n        return this.a === 1 ? `hsv(${h}, ${s}%, ${v}%)` : `hsva(${h}, ${s}%, ${v}%, ${this.roundA})`;\n    }\n    /**\n     * Returns the object as a HSLA object.\n     */\n    toHsl() {\n        const hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    }\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    toHslString() {\n        const hsl = rgbToHsl(this.r, this.g, this.b);\n        const h = Math.round(hsl.h * 360);\n        const s = Math.round(hsl.s * 100);\n        const l = Math.round(hsl.l * 100);\n        return this.a === 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${this.roundA})`;\n    }\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    toHex(allow3Char = false) {\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    }\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    toHexString(allow3Char = false) {\n        return '#' + this.toHex(allow3Char);\n    }\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    toHex8(allow4Char = false) {\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    }\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    toHex8String(allow4Char = false) {\n        return '#' + this.toHex8(allow4Char);\n    }\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */\n    toHexShortString(allowShortChar = false) {\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    }\n    /**\n     * Returns the object as a RGBA object.\n     */\n    toRgb() {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    }\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    toRgbString() {\n        const r = Math.round(this.r);\n        const g = Math.round(this.g);\n        const b = Math.round(this.b);\n        return this.a === 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${this.roundA})`;\n    }\n    /**\n     * Returns the object as a RGBA object.\n     */\n    toPercentageRgb() {\n        const fmt = (x) => `${Math.round(bound01(x, 255) * 100)}%`;\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    }\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    toPercentageRgbString() {\n        const rnd = (x) => Math.round(bound01(x, 255) * 100);\n        return this.a === 1\n            ? `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)`\n            : `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;\n    }\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    toName() {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        const hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n        for (const [key, value] of Object.entries(names)) {\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    }\n    toString(format) {\n        const formatSet = Boolean(format);\n        format = format ?? this.format;\n        let formattedString = false;\n        const hasAlpha = this.a < 1 && this.a >= 0;\n        const needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    }\n    toNumber() {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    }\n    clone() {\n        return new TinyColor(this.toString());\n    }\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    lighten(amount = 10) {\n        const hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    }\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    brighten(amount = 10) {\n        const rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    }\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    darken(amount = 10) {\n        const hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    }\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    tint(amount = 10) {\n        return this.mix('white', amount);\n    }\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    shade(amount = 10) {\n        return this.mix('black', amount);\n    }\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    desaturate(amount = 10) {\n        const hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    }\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    saturate(amount = 10) {\n        const hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    }\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    greyscale() {\n        return this.desaturate(100);\n    }\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    spin(amount) {\n        const hsl = this.toHsl();\n        const hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    }\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    mix(color, amount = 50) {\n        const rgb1 = this.toRgb();\n        const rgb2 = new TinyColor(color).toRgb();\n        const p = amount / 100;\n        const rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    }\n    analogous(results = 6, slices = 30) {\n        const hsl = this.toHsl();\n        const part = 360 / slices;\n        const ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    }\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    complement() {\n        const hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    }\n    monochromatic(results = 6) {\n        const hsv = this.toHsv();\n        const { h } = hsv;\n        const { s } = hsv;\n        let { v } = hsv;\n        const res = [];\n        const modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h, s, v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    }\n    splitcomplement() {\n        const hsl = this.toHsl();\n        const { h } = hsl;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    }\n    /**\n     * Compute how the color would appear on a background\n     */\n    onBackground(background) {\n        const fg = this.toRgb();\n        const bg = new TinyColor(background).toRgb();\n        const alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha,\n        });\n    }\n    /**\n     * Alias for `polyad(3)`\n     */\n    triad() {\n        return this.polyad(3);\n    }\n    /**\n     * Alias for `polyad(4)`\n     */\n    tetrad() {\n        return this.polyad(4);\n    }\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    polyad(n) {\n        const hsl = this.toHsl();\n        const { h } = hsl;\n        const result = [this];\n        const increment = 360 / n;\n        for (let i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    }\n    /**\n     * compare color vs current color\n     */\n    equals(color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    }\n}\n","\"use strict\";var h=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var u=(l,i,e,t)=>{for(var r=t>1?void 0:t?c(i,e):i,o=l.length-1,s;o>=0;o--)(s=l[o])&&(r=(t?s(i,e,r):s(r))||r);return t&&r&&h(i,e,r),r};import{html as a}from\"@spectrum-web-components/base\";import{property as d}from\"@spectrum-web-components/base/src/decorators.js\";import{TinyColor as n}from\"@ctrl/tinycolor\";import{TextfieldBase as p}from\"@spectrum-web-components/textfield\";export class ColorField extends p{constructor(){super(...arguments);this.viewColor=!1;this._value=\"\";this.cachedColor=null;this.cachedTinyColor=null}static get styles(){return[...super.styles]}set value(e){if(e===this.value)return;const t=this._value;this._value=e,this.requestUpdate(\"value\",t)}get value(){return this._value}getColorValue(){if(!this.value)return\"\";if(!this.cachedColor||this.cachedColor!==this.value){const e=new n(this.value);this.cachedColor=e.isValid?e.toRgbString():\"\"}return this.cachedColor}renderColorHandle(){return this.viewColor?a`\n                  <sp-color-handle\n                      size=\"m\"\n                      color=\"${this.getColorValue()}\"\n                  ></sp-color-handle>\n              `:a``}render(){return this.viewColor&&import(\"@spectrum-web-components/color-handle/sp-color-handle.js\"),a`\n            ${super.render()} ${this.renderColorHandle()}\n        `}checkValidity(){let e=super.checkValidity();return this.value&&((!this.cachedTinyColor||this.cachedTinyColor.originalInput!==this.value)&&(this.cachedTinyColor=new n(this.value)),this.valid=e=this.cachedTinyColor.isValid,this.invalid=!e),e}}u([d({type:Boolean,attribute:\"view-color\"})],ColorField.prototype,\"viewColor\",2);\n//# sourceMappingURL=ColorField.js.map\n","\"use strict\";import{ColorField as e}from\"./src/ColorField.js\";customElements.define(\"sp-color-field\",e);\n//# sourceMappingURL=sp-color-field.js.map\n"],"names":["bound01","n","max","indexOf","parseFloat","isOnePointZero","isPercent","isPercentage","Math","min","parseInt","String","abs","clamp01","val","boundAlpha","a","isNaN","convertToPercentage","Number","pad2","c","length","rgbToHsl","r","g","b","h","s","l","d","hue2rgb","p","q","t","rgbToHsv","v","rgbToHex","allow3Char","hex","round","toString","startsWith","charAt","join","convertHexToDecimal","parseIntFromHex","names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","goldenrod","gold","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavenderblush","lavender","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","inputToRGB","color","rgb","ok","format","trim","toLowerCase","named","match","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","substr","i","floor","f","mod","hsvToRgb","hslToRgb","Object","prototype","hasOwnProperty","call","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","Boolean","TinyColor","constructor","opts","numberInputToObject","this","originalInput","roundA","gradientType","isValid","isDark","getBrightness","isLight","toRgb","getLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","isMonochrome","toHsl","toHsv","toHsvString","toHslString","toHex","toHexString","toHex8","allow4Char","rgbaToHex","toHex8String","toHexShortString","allowShortChar","toRgbString","toPercentageRgb","fmt","x","toPercentageRgbString","rnd","toName","key","value","entries","formatSet","formattedString","hasAlpha","toNumber","clone","lighten","amount","brighten","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","result","increment","equals","defineProperty","getOwnPropertyDescriptor","ColorField","arguments","viewColor","_value","cachedColor","cachedTinyColor","styles","super","e","requestUpdate","getColorValue","renderColorHandle","render","import","checkValidity","valid","invalid","o","u","type","attribute","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}